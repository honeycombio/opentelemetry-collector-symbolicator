// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"
	"sync"

	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/honeycombio/opentelemetry-collector-symbolicator/symbolicatorprocessor")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/honeycombio/opentelemetry-collector-symbolicator/symbolicatorprocessor")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                                   metric.Meter
	mu                                      sync.Mutex
	registrations                           []metric.Registration
	ProcessMemoryRss                        metric.Int64Gauge
	ProcessUptime                           metric.Float64Gauge
	ProcessorIncomingItems                  metric.Int64Counter
	ProcessorOutgoingItems                  metric.Int64Counter
	SymbolicatorSourceMapCacheSize          metric.Int64Gauge
	SymbolicatorSourceMapFetchFailuresTotal metric.Int64Counter
	SymbolicatorSymbolicationDuration       metric.Float64Histogram
	SymbolicatorTotalFailedFrames           metric.Int64Counter
	SymbolicatorTotalProcessedFrames        metric.Int64Counter
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
	tbof(mb)
}

// Shutdown unregister all registered callbacks for async instruments.
func (builder *TelemetryBuilder) Shutdown() {
	builder.mu.Lock()
	defer builder.mu.Unlock()
	for _, reg := range builder.registrations {
		reg.Unregister()
	}
}

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
	builder.meter = Meter(settings)
	var err, errs error
	builder.ProcessMemoryRss, err = builder.meter.Int64Gauge(
		"otelcol_process_memory_rss",
		metric.WithDescription("Memory usage of the processor in bytes."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessUptime, err = builder.meter.Float64Gauge(
		"otelcol_process_uptime",
		metric.WithDescription("Uptime of the processor in seconds."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorIncomingItems, err = builder.meter.Int64Counter(
		"otelcol_processor_incoming_items",
		metric.WithDescription("Total number of items received by the processor."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.ProcessorOutgoingItems, err = builder.meter.Int64Counter(
		"otelcol_processor_outgoing_items",
		metric.WithDescription("Total number of items sent by the processor."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.SymbolicatorSourceMapCacheSize, err = builder.meter.Int64Gauge(
		"otelcol_symbolicator_source_map_cache_size",
		metric.WithDescription("Size of the source map cache in bytes."),
		metric.WithUnit("{sourcemaps}"),
	)
	errs = errors.Join(errs, err)
	builder.SymbolicatorSourceMapFetchFailuresTotal, err = builder.meter.Int64Counter(
		"otelcol_symbolicator_source_map_fetch_failures_total",
		metric.WithDescription("Total number of source map fetch failures."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.SymbolicatorSymbolicationDuration, err = builder.meter.Float64Histogram(
		"otelcol_symbolicator_symbolication_duration",
		metric.WithDescription("Duration in seconds taken to symbolicate frames."),
		metric.WithUnit("s"),
	)
	errs = errors.Join(errs, err)
	builder.SymbolicatorTotalFailedFrames, err = builder.meter.Int64Counter(
		"otelcol_symbolicator_total_failed_frames",
		metric.WithDescription("Total number of frames the symbolicator failed to symbolicate."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	builder.SymbolicatorTotalProcessedFrames, err = builder.meter.Int64Counter(
		"otelcol_symbolicator_total_processed_frames",
		metric.WithDescription("Total number of frames the symbolicator processed."),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}
